using System.IO;
using System.Linq;
using FlowerBI.Yaml;

namespace FlowerBI.Conversion;

public static class TypeScript
{
    static string TSColumnType(DataType dataType, bool nullable)
    {
        var jsType = dataType switch
        {
            DataType.Bool => "boolean",
            DataType.String => "string",
            DataType.DateTime => "Date",
            _ => "number"
        };
        if (nullable)
        {
            jsType = $"{jsType} | null";
        }

        return jsType != "number" ? $"QueryColumn<{jsType}>" :
               dataType is DataType.Decimal or DataType.Float or DataType.Double ? $"NumericQueryColumn<{jsType}>" : 
               $"IntegerQueryColumn<{jsType}>";
    }

    public static void FromYaml(string yamlFile, string tsFile, TextWriter console)
        => FromSchema(ResolvedSchema.Resolve(File.ReadAllText(yamlFile)), tsFile, console);
    
    public static void FromReflection(string path, string schemaClass, string tsFile, TextWriter console)
        => FromSchema(Reflection.ToSchema(path, schemaClass, console), tsFile, console);
    
    static void FromSchema(ResolvedSchema schema, string tsFile, TextWriter console)
    {
        using var writer = new StreamWriter(tsFile);

        console.WriteLine($"Saving to file {tsFile}");
        FromSchema(schema, writer, console);
    }

    public static void FromSchema(ResolvedSchema schema, TextWriter writer, TextWriter console)
    {
        writer.WriteLine(@"import { QueryColumn, NumericQueryColumn, IntegerQueryColumn } from ""flowerbi"";");
        writer.WriteLine();
        writer.WriteLine("// Important: this file is auto-generated by flowerbi.");
        writer.WriteLine();

        var tableWriter = new IndentedWriter(writer);

        foreach (var table in schema.Tables)
        {
            console.WriteLine($"Exporting table {table.Name}");
            writer.WriteLine($"export const {table.Name} = {{");

            var idColumn = table.IdColumn != null ? new[] { table.IdColumn } : Enumerable.Empty<ResolvedColumn>();

            foreach (var column in idColumn.Concat(table.Columns))
            {
                var tsType = TSColumnType(column.DataType, column.Nullable);
                tableWriter.WriteLine(@$"{column.Name}: new {tsType}(""{table.Name}.{column.Name}""),");
            }

            writer.WriteLine("};");
            writer.WriteLine();
        }
        
        writer.WriteLine($"export const {schema.Name} = {{");
        foreach (var table in schema.Tables)
        {
            tableWriter.WriteLine(@$"{table.Name},");
        }
        writer.WriteLine("};");

        writer.Flush();
        console.WriteLine("Done.");
    }
}
